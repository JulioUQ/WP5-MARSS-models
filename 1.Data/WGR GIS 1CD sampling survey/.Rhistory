library(tidyverse)
ice = read_csv("iceland_greenland_strata.csv", col_names = TRUE)
View(ice)
wgr = read_csv("D_HAULS_GHLW_97-19_1CD.CSV", col_names = TRUE)
View(wgr)
names(ice)
names(wgr)
head(ice)
head(wgr)
View(wgr)
View(ice)
wgr_1 <- select(wgr, project, haul, npos, wpos, stratum)
View(wgr_1)
wgr_1 %>% mutate(observation = 1:n()) %>% select(observation, everything())
View(wgr)
View(wgr_1)
wgr_1 <- mutate(observation = 1:n()) %>%
select(observation, everything())
wgr_1 %>% mutate(observation = 1:n()) %>% select(observation, everything())
wgr_2 <-wgr_1 %>% mutate(observation = 1:n()) %>% select(observation, everything())
View(wgr_2)
wgr_2 <-wgr_1 %>% mutate(order = 1:n()) %>% select(order, everything())
View(wgr_2)
View(ice)
wgr_2$wpos = wgr_2$wpos*-1
View(wgr_2)
write_csv(wgr_2, "wgr_ghalibut_strata.csv")
View(wgr_2)
library(rgdal)
library(sp)
library(sf)
library(tidyverse)
#> 1. Data.
wgr <- read.csv(file="wgr_ghalibut_strata.csv", header=TRUE, sep=",")
str(wgr)
class(wgr) # data.frame
#> 2. Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
wgr_prj84 <- st_as_sf(wgr, coords = c("wpos", "npos"), crs = 4326) # EPSG
st_crs(wgr_prj84)
class(wgr_prj84) # sf     data.frame
plot(wgr_prj84$geometry,
main="Map of Plot Locations")
wgr$wpos = wgr$wpos*-1
#> 2. Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
wgr_prj84 <- st_as_sf(wgr, coords = c("wpos", "npos"), crs = 4326) # EPSG
st_crs(wgr_prj84)
class(wgr_prj84) # sf     data.frame
plot(wgr_prj84$geometry,
main="Map of Plot Locations")
library(rgdal)
library(sp)
library(sf)
library(tidyverse)
#> 1. Data.
WgrData <- read.csv(file="D_HAULS_GHL_97-19_1CD.csv", header=TRUE, sep=",")
#> 1. Data.
WgrData <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",")
str(WgrData)
class(WgrData) # data.frame
#> 2. Sorted data
unique(WgrData$lat.l)
#> 2. Sorted data
is.na(WgrData$lat.l)
#> 2. Sorted data
is.na(WgrData$lat.l)
#> 2. Sorted data
is.na(WgrData)
#> 2. Sorted data
na.omit(WgrData)
str(WgrData)
#> Libraries. Default libraries included, make sure you install and load if you need more.
install.packages("raster")
#> Libraries. Default libraries included, make sure you install and load if you need more.
library(sp)
library(sf)
library(tidyverse)
#> 1. Raw data.
WgrData <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",")
str(WgrData)
#> 2. Sorted data
wgr <- select(WgrData, project, year, div, npos, wpos)
#> 2. Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
WgrData_prj84 <- st_as_sf(wgr, coords = c("wpos", "npos"), dim = "XY",
crs = 4326, na.fail = FALSE) # EPSG
#> 3. Method sp.
WgrData_prj84_sp <- WgrData[!is.na(wgr$wpos) & !is.na(wgr&npos),]
#> 1. Raw data.
WgrData <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",")
str(WgrData)
class(WgrData) # data.frame
#> 2. Sorted data
wgr <- select(WgrData, project, year, div, npos, wpos)
#> 2. Method sf.
#> Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
WgrData_prj84_sf <- st_as_sf(wgr, coords = c("wpos", "npos"), dim = "XY",
crs = 4326, na.fail = FALSE) # EPSG
#> Libraries. Default libraries included, make sure you install and load if you need more.
library(sp)
library(sf)
library(tidyverse)
#> 1. Raw data.
WgrData <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",")
str(WgrData)
class(WgrData) # data.frame
#> 2. Sorted data
wgr <- select(WgrData, project, year, div, npos, wpos)
#> 2. Method sf.
#> Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
WgrData_prj84_sf <- st_as_sf(wgr, coords = c("wpos", "npos"), dim = "XY",
crs = 4326, na.fail = FALSE) # EPSG
st_crs(WgrData_prj84_sf)
class(WgrData_prj84_sf) # sf     data.frame
#> 3. Method sp.
WgrData_prj84_sp <- WgrData[!is.na(wgr$wpos) & !is.na(wgr&npos),]
#> 3. Method sp.
WgrData_prj84_sp <- wgr[!is.na(wgr$wpos) & !is.na(wgr&npos),]
View(wgr)
wgr$wpos = wgr$wpos*-1
#> 2. Method sf.
#> Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
WgrData_prj84_sf <- st_as_sf(wgr, coords = c("wpos", "npos"), dim = "XY",
crs = 4326, na.fail = FALSE) # EPSG
st_crs(WgrData_prj84_sf)
class(WgrData_prj84_sf) # sf     data.frame
#> 3. Method sp.
WgrData_prj84_sp <- wgr[!is.na(wgr$wpos) & !is.na(wgr&npos),]
View(wgr)
#> 3. Method sp.
WgrData_prj84_sp <- wgr[!is.na(wgr$wpos) & !is.na(wgr&npos),]
names(wgr)
#> 3. Method sp.
WgrData_prj84_sp <- wgr[!is.na(wgr$wpos) & !is.na(wgr$npos),]
coordinates(WgrData_prj84_sp) = ~ x + y
coordinates(WgrData_prj84_sp) = ~ wpos + npos
WgrData_prj84_sp = st_as_sf(WgrData_prj84_sp)
st_crs(WgrData_prj84_sp) = 4326
#> Libraries. Default libraries included, make sure you install and load if you need more.
install.packages("mapview")
libraray(mapview)
library(mapview)
#> 4. Plot.
plot(WgrData_prj84_sp)
mapview(st_transform(WgrData_prj84_sp, crs = 4326))
plot(WgrData_prj84_sf)
mapview(st_transform(WgrData_prj84_sf, crs = 4326))
View(WgrData_prj84_sf)
ggOceanMaps::qmap(WgrData_prj84_sf, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
head(WgrData_prj84_sp)
head(WgrData_prj84_sf)
WgrData_prj84_sf = sf_polygon(., x = "wpos", y = "npos", polygon_id = "project")
library(mapview)
library(sp)
library(sf)
library(tidyverse)
WgrData_prj84_sf = sfheaders::sf_polygon(., x = "wpos", y = "npos", polygon_id = "project")
wgr_sf <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",") %>%
st_as_sf(., coords = c("wpos", "npos"), dim = "XY", crs = 4326, na.fail = FALSE) %>%  # EPSG
sfheaders::sf_polygon(., x = "lon", y = "lat", polygon_id = "stratum") %>%
st_set_crs(4326)
wgr_sf <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",") %>%
st_as_sf(., coords = c("wpos", "npos"), dim = "XY", crs = 4326, na.fail = FALSE) %>%  # EPSG
sfheaders::sf_polygon(., x = "wpos", y = "npos", polygon_id = "stratum") %>%
st_set_crs(4326)
wgr_sf <- read.csv(file="D_HAULS_GHLW_97-19_1CD.csv", header=TRUE, sep=",") %>%
st_as_sf(., coords = c("wpos", "npos"), dim = "XY", crs = 4326, na.fail = FALSE) %>%  # EPSG
sfheaders::sf_polygon(., x = "wpos", y = "npos", polygon_id = "project") %>%
st_set_crs(4326)
View(WgrData)
WgrData_prj84_sf = sfheaders::sf_polygon(., x = "wpos", y = "npos", polygon_id = "project") %>%
st_set_crs(4326)
WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (project) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
plot()
WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (div) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
plot()
View(wgr)
WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (year) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
plot()
WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (year) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
ggOceanMaps::qmap(WgrData_prj84_sf, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (year) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
st_union() %>%
ggOceanMaps::qmap(WgrData_prj84_sf, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
#> Libraries. Default libraries included, make sure you install and load if you need more.
library(sf)
library(tidyverse)
library(ggOceanMaps)
library(ggnewscale)
library(sfheaders)
head(WgrData_prj84_sf)
#> 5. Transform from POINTS into POLYGONS
x4 = WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (year) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
st_union() %>%
ggOceanMaps::qmap(WgrData_prj84_sf, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
#> 5. Transform from POINTS into POLYGONS
x4 = WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (year) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON") %>%
ggOceanMaps::qmap(WgrData_prj84_sf, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
head(x4)
View(x4)
#> 5. Transform from POINTS into POLYGONS
x4 = WgrData_prj84_sf %>%
st_as_sf(coords = c("wpos", "npos"), crs = 4326) %>%
group_by (year) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON")
head(x4)
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
sf::st_cast("POLYGON") %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
View(x4)
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
group_by (year) %>%
sf::st_cast("POLYGON") %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
View(WgrData_prj84)
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
group_by (WgrData_prj84_sf$year) %>%
sf::st_cast("POLYGON") %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
summarise(geometry = st_combine(geometry)) %>%
sf::st_cast("POLYGON") %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
View(WgrData_prj84_sf)
#> 5. Transform from POINTS into POLYGONS
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
View(x4)
#> 5. Transform from POINTS into POLYGONS
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
rename("x" = "geom") %>%
tibble::add_column(survey = "West Greenland") %>%
suppressMessages()
#> 5. Transform from POINTS into POLYGONS
x4 = sf::st_union(WgrData_prj84_sf) %>%
sf::st_make_valid() %>%
sf::st_as_sf() %>%
tibble::add_column(survey = "West Greenland") %>%
rename("x" = "geom") %>%
suppressMessages()
#> 5. Transform from POINTS into POLYGONS
x4 <- st_union(WgrData_prj84_sf) %>%
st_make_valid() %>%
st_as_sf() %>%
smoothr::drop_crumbs(., units::set_units(1e4, "km^2", mode = "standard")) %>% # remove small fragments
add_column(survey = "West Greenland")  %>%
rename("x" = "geom") %>%
suppressMessages() %>%
suppressWarnings()
#> 5. Transform from POINTS into POLYGONS
x4 <- st_union(WgrData_prj84_sf) %>%
st_make_valid() %>%
st_as_sf() %>%
add_column(survey = "West Greenland")  %>%
rename("x" = "geom") %>%
suppressMessages() %>%
suppressWarnings()
View(x4)
#> 5. Transform from POINTS into POLYGONS
x4 <- st_union(WgrData_prj84_sf) %>%
st_make_valid() %>%
st_as_sf() %>%
add_column(survey = "West Greenland")  %>%
rename("geom" = "x") %>%
suppressMessages() %>%
suppressWarnings()
View(x4)
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
x5 <- sfheaders::sf_polygon(
obj = x4
, x = "wpos"
, y = "npos"
, polygon_id = "project"
)
View(wgr)
View(WgrData)
#> 6. Save vector spatial object.
st_write(WgrData_prj84_sf, "wgr_ghalibut_stations.shp")
View(WgrData)
#> 2. Sorted data
WgrData$wpos = WgrData$wpos*-1
#> 3. Method sf.
#> Transform to a Spatial file with the fittest projection to out coordinates.
#> You can check out what CRS fits the best with your data here:https://www.spatialreference.org.
WgrData_prj84_sf <- st_as_sf(WgrData, coords = c("wpos", "npos"), dim = "XY",
crs = 4326, na.fail = FALSE) # EPSG
st_crs(WgrData_prj84_sf)
class(WgrData_prj84_sf) # sf     data.frame
head(WgrData_prj84_sf)
mapview::mapview(st_transform(WgrData_prj84_sf, crs = 4326)) # Interactive basemap
#> 5. Transform from POINTS into POLYGONS
x4 <- st_union(WgrData_prj84_sf) %>%
st_make_valid() %>%
st_as_sf() %>%
group_by(haul) %>%
summarise() %>%
st_cast("POLYGON") %>%
add_column(survey = "West Greenland")  %>%
rename("geom" = "x") %>%
suppressMessages() %>%
suppressWarnings()
x4 = WgrData_prj84_sf %>%
dplyr::group_by(haul) %>%
dplyr::summarise() %>%
st_cast("POLYGON")
View(WgrData)
x4 = WgrData_prj84_sf %>%
dplyr::group_by(stratum) %>%
dplyr::summarise() %>%
st_cast("POLYGON")
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
x4 = WgrData_prj84_sf %>%
dplyr::group_by(div) %>%
dplyr::summarise() %>%
st_cast("POLYGON")
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
x4 = WgrData_prj84_sf %>%
dplyr::group_by(stratum2) %>%
dplyr::summarise() %>%
st_cast("POLYGON")
x4 = WgrData_prj84_sf %>%
dplyr::group_by(fixpos) %>%
dplyr::summarise() %>%
st_cast("POLYGON")
x4 = WgrData_prj84_sf %>%
dplyr::group_by(Stratum2) %>%
dplyr::summarise() %>%
st_cast("POLYGON")
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
x4 = arrange(x4$stratum, haul)
#> 5. Transform from POINTS into POLYGONS
x4 <- st_union(WgrData_prj84_sf) %>%
st_make_valid() %>%
st_as_sf() %>%
group_by(haul) %>%
summarise() %>%
st_cast("POLYGON") %>%
add_column(survey = "West Greenland")  %>%
rename("geom" = "x") %>%
suppressMessages() %>%
suppressWarnings()
#> 5. Transform from POINTS into POLYGONS
x4 <- st_union(WgrData_prj84_sf) %>%
st_make_valid() %>%
st_as_sf() %>%
st_cast("POLYGON") %>%
add_column(survey = "West Greenland")  %>%
rename("geom" = "x") %>%
suppressMessages() %>%
suppressWarnings()
ggOceanMaps::qmap(x4, fill = I("red"), alpha = I(0.5), rotate = TRUE, labs(fill= "project"))
mapview::mapview(st_transform(x4, crs = 4326)) # Interactive basemap
